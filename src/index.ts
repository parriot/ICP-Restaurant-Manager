import {
  Canister,
  Record,
  Result,
  StableBTreeMap,
  Vec,
  int,
  query,
  text,
  update,
  Variant,
  Err,
  Ok,
} from "azle";
import { v4 as uuidv4 } from "uuid";

// Define the MenuItem structure
const MenuItem = Record({
  id: text,
  name: text,
  description: text,
  price: int,
});

// Define the MenuItem structure
const MenuItemPayload = Record({
  name: text,
  description: text,
  price: int,
});

type MenuItemType = typeof MenuItem;

// Define the TableReservation structure
const TableReservation = Record({
  id: text,
  name: text,
  date: text,
  time: text,
  numberOfGuests: int,
});

type TableReservationType = typeof TableReservation;
// Define the TableReservation structure
const TableReservationPayload = Record({
  name: text,
  date: text,
  time: text,
  numberOfGuests: int,
});


const Error = Variant({
  NotFound: text,
  InvalidPayload: text,
  InvalidId: text,
});

// Initialize the menu items and table reservations storage
let menuItemsStorage = StableBTreeMap(text, MenuItem, 0);
let tableReservationsStorage = StableBTreeMap(text, TableReservation, 1);


// Helper function that trims the input string and then checks the length
// The string is empty if true is returned, otherwise, string is a valid value
function isInvalidString(str: string): boolean  {
  return str.trim().length == 0;
}

// Helper function to ensure the input id meets the format used for ids generated by uuid
function isValidUuid(id: string): boolean {
  const regexExp = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/gi;
  return regexExp.test(id);
}
// Helper function to ensure the date is in the format MM/DD/YYYY
function isValidDate(date: string): boolean {
  const regexExp = /^(0[1-9]|1[1,2])(\/|-)(0[1-9]|[12][0-9]|3[01])(\/|-)(19|20)\d{2}$/;
  return regexExp.test(date);
}

export default Canister({
  // Add a new menu item
  addMenuItem: update([MenuItemPayload], Result(MenuItem, Error), (payload) => {
    if (isInvalidString(payload.name) || isInvalidString(payload.description)){
      return Err({
        InvalidPayload:`The input string data cannot be empty. Payload={name: ${payload.name}, description: ${payload.description}}`
      })
    }
    const id = uuidv4();
    let menuItem : MenuItemType = {
      id: id,
      name: payload.name,
      description: payload.description,
      price: payload.price,
    }
    menuItemsStorage.insert(id, menuItem);
    return Ok(menuItem);
  }),

  // Update an existing menu item
  updateMenuItem: update(
    [text, MenuItemPayload],
    Result(MenuItem, Error),
    (id, payload) => {
      if (!isValidUuid(id)){
        return Err({InvalidId: `Id=${id} is not in the valid uuid format.`})
      }
      if (isInvalidString(payload.name) || isInvalidString(payload.description)){
        return Err({
          InvalidPayload:`The input string data cannot be empty. Payload={name: ${payload.name}, description: ${payload.description}}`
        })
      }
      let menuItemOpt = menuItemsStorage.get(id);
      if ("None" in menuItemOpt) {
        return Err({NotFound: `Menu item with id=${id} was not found.`})
      }

      let updatedMenuItem : MenuItemType = {
        id: id,
        name: payload.name,
        description: payload.description,
        price: payload.price,
      }

      menuItemsStorage.insert(id, updatedMenuItem);
      return Ok(updatedMenuItem);
    }
  ),

  // List all menu items
  getMenuItems: query([], Vec(MenuItem), () => {
    return menuItemsStorage.values();
  }),

  // Add a table reservation
  addTableReservation: update(
    [TableReservationPayload],
    Result(TableReservation, Error),
    (payload) => {
      if (isInvalidString(payload.name)){
        return Err({
          InvalidPayload:`Name cannot be empty: ${payload.name}.`
        })
      }
      if (!isValidDate(payload.date)){
        return Err({InvalidPayload: `Date= ${payload.date} is not valid.`})
      }
      const id = uuidv4();
      let tableReservation : TableReservationType = {
        id: id,
        name: payload.name,
        date: payload.date,
        time: payload.time,
        numberOfGuests: payload.numberOfGuests,
      }
      tableReservationsStorage.insert(id, tableReservation);
      return Ok(tableReservation);
    }
  ),

  // List all table reservations
  getTableReservations: query([], Vec(TableReservation), () => {
    return tableReservationsStorage.values();
  }),
});
